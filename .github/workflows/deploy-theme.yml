name: Deploy WP themes & plugins to GCP VM

on:
  push:
    branches: [ "main" ]
    paths:
      - "themes/**"
      - "plugins/**"
      - ".github/workflows/deploy-wp.yml"
      - ".rsyncignore"
  workflow_dispatch: {}

env:
  REMOTE_PATH: ${{ secrets.REMOTE_PATH }}   # /var/www/wordpress
  WP_CLI_PATH: ${{ secrets.WP_CLI_PATH }}   # /var/www/wordpress

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (Optional) Build assets nếu có package.json
      - name: Build theme/plugin assets (optional)
        if: hashFiles('themes/**/package.json', 'plugins/**/package.json') != ''
        run: |
          set -e
          corepack enable || true
          npm -v || (sudo apt-get update && sudo apt-get install -y npm)
          for PKG in $(git ls-files "themes/**/package.json" "plugins/**/package.json"); do
            DIR=$(dirname "$PKG")
            echo "== Build in $DIR =="
            (cd "$DIR" && npm ci || npm install && npm run build || true)
          done

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure remote dirs exist (no sudo)
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_ed25519 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -e
            mkdir -p '${{ env.REMOTE_PATH }}/wp-content/themes' '${{ env.REMOTE_PATH }}/wp-content/plugins'
          "

      - name: Enable maintenance mode (optional)
        continue-on-error: true
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_ed25519 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd '${{ env.WP_CLI_PATH }}' && wp maintenance-mode activate || true"

      - name: Rsync THEMES
        if: hashFiles('themes/**') != ''
        run: |
          set -e
          RSYNC_EXCLUDES=""
          [ -f ".rsyncignore" ] && RSYNC_EXCLUDES="--exclude-from=.rsyncignore"
          # Luôn exclude drop-in Redis dù repo không có:
          RSYNC_EXCLUDES="$RSYNC_EXCLUDES --exclude 'object-cache.php'"

          rsync -az --delete \
            --omit-dir-times --no-perms --no-owner --no-group \
            --chmod=Dug=rwx,Dog=rx,Fug=rw,Fog=r \
            -e "ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_ed25519" \
            $RSYNC_EXCLUDES \
            themes/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ env.REMOTE_PATH }}/wp-content/themes/

      - name: Rsync PLUGINS
        if: hashFiles('plugins/**') != ''
        run: |
          set -e
          RSYNC_EXCLUDES=""
          [ -f ".rsyncignore" ] && RSYNC_EXCLUDES="--exclude-from=.rsyncignore"
          RSYNC_EXCLUDES="$RSYNC_EXCLUDES --exclude 'object-cache.php'"

          rsync -az --delete \
            --omit-dir-times --no-perms --no-owner --no-group \
            --chmod=Dug=rwx,Dog=rx,Fug=rw,Fog=r \
            -e "ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_ed25519" \
            $RSYNC_EXCLUDES \
            plugins/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ env.REMOTE_PATH }}/wp-content/plugins/

      - name: Post-deploy: flush cache & permalinks
        continue-on-error: true
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_ed25519 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'EOF'
          set -e
          cd "${WP_CLI_PATH:-${REMOTE_PATH}}"
          # Xóa cache ở tầng WordPress (an toàn, hoạt động cả khi có Redis)
          wp cache flush || true
          # Làm mới permalink rules
          wp rewrite flush --hard || true
          EOF

      - name: Disable maintenance mode
        continue-on-error: true
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -i ~/.ssh/id_ed25519 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd '${{ env.WP_CLI_PATH }}' && wp maintenance-mode deactivate || true"

      # (Tùy chọn) Smoke test trang chủ: kiểm tra có trả về 200 và không có 'critical error'
      - name: Smoke test
        continue-on-error: true
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://beingblog.dpdns.org/ || true)
          echo "HTTP Status: $STATUS"
          curl -s https://beingblog.dpdns.org/ | ( ! grep -qi "critical error" ) && echo "No critical error string found" || echo "Possible critical error detected"

